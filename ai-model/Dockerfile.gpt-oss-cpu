# GrantSeeker AI - GPT-OSS-20B Container (CPU-compatible for Azure Container Registry)
# This version uses CPU with quantization for Azure Container Instances deployment
FROM python:3.10-slim

LABEL maintainer="GrantSeeker AI Platform" \
      description="Containerized GPT-OSS-20B for AI-powered grant writing" \
      version="2.0.0"

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    build-essential \
    cmake \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy requirements first for better Docker layer caching
COPY requirements.txt .

# Install PyTorch CPU version first
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir torch==2.4.0+cpu torchvision==0.19.0+cpu torchaudio==2.4.0+cpu --index-url https://download.pytorch.org/whl/cpu

# Install other Python dependencies with compatible versions
RUN pip install --no-cache-dir \
    Flask==3.0.0 \
    waitress==3.0.0 \
    gunicorn==21.2.0 \
    transformers==4.42.0 \
    accelerate==0.33.0 \
    huggingface-hub==0.24.0 \
    tokenizers==0.19.1 \
    bitsandbytes==0.41.0 \
    optimum==1.21.0 \
    requests==2.31.0 \
    packaging==23.1 \
    psutil==5.9.5

# Copy Flask API application
COPY flask_gpt_oss_api.py .
COPY deploy/ ./deploy/

# Create necessary directories
RUN mkdir -p /app/logs /app/cache

# Set environment variables for production
ENV PYTHONUNBUFFERED=1 \
    FLASK_ENV=production \
    HF_HOME=/app/cache \
    TRANSFORMERS_CACHE=/app/cache \
    PYTORCH_TRANSFORMERS_CACHE=/app/cache \
    CUDA_VISIBLE_DEVICES=-1

# Expose port 8000
EXPOSE 8000

# Health check for container orchestration
HEALTHCHECK --interval=60s --timeout=30s --start-period=600s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Use non-root user for security
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# Pre-download tokenizer to reduce startup time
RUN python3 -c "from transformers import AutoTokenizer; \
    print('Pre-downloading GPT-OSS-20B tokenizer...'); \
    tokenizer = AutoTokenizer.from_pretrained('openai/gpt-oss-20b', cache_dir='/app/cache'); \
    print('Tokenizer downloaded successfully')" || echo "Tokenizer pre-download failed, will download on first run"

# Run Flask application
CMD ["python3", "flask_gpt_oss_api.py"]