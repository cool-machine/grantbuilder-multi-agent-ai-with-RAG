name: ‚ö° Deploy Azure Functions Backend

on:
  push:
    branches: [ main ]
    paths: [ 'backend/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  AZURE_FUNCTIONAPP_NAME: ocp10-grant-functions
  AZURE_FUNCTIONAPP_PACKAGE_PATH: ./backend
  PYTHON_VERSION: '3.10'

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üêç Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üß™ Verify function structure
      run: |
        echo "Checking Azure Functions structure..."
        find . -name "function.json" -exec echo "Found function: {}" \;
        echo "Functions are ready for deployment"

    - name: üìÅ Prepare deployment package
      run: |
        echo "üì¶ Preparing Azure Functions deployment package with dependencies..."
        ls -la
        echo "Function directories:"
        find . -name "function.json" -exec dirname {} \;
        echo "Installing dependencies to deployment package..."
        pip install -r requirements.txt --target .
        echo "Package contents:"
        ls -la | head -20

    - name: üì§ Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: azure-functions-app
        path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    
    steps:
    - name: üì• Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: azure-functions-app
        path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

    - name: üîê Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: ‚ö° Deploy to Azure Functions
      run: |
        echo "üì¶ Deploying Azure Functions using Azure CLI..."
        cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        echo "Current directory contents:"
        ls -la
        echo "Creating deployment package..."
        zip -r ../function-app.zip . -x "*.git*" "*.DS_Store*" "*__pycache__*"
        cd ..
        echo "Deploying to Azure Functions..."
        az functionapp deployment source config-zip \
          --resource-group ocp10 \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --src function-app.zip
        echo "‚úÖ Deployment completed"

    - name: üîß Configure App Settings
      run: |
        echo "üîß Updating Azure Functions app settings..."
        az functionapp config appsettings set \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ocp10 \
          --settings \
            "AZURE_ML_GPT_OSS_ENDPOINT=${{ secrets.AZURE_ML_GPT_OSS_ENDPOINT }}" \
            "AZURE_ML_GPT_OSS_KEY=${{ secrets.AZURE_ML_GPT_OSS_KEY }}" \
            "AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
            "PYTHONPATH=/home/site/wwwroot" \
            "FUNCTIONS_WORKER_RUNTIME=python" \
            "FUNCTIONS_EXTENSION_VERSION=~4"

    - name: ‚úÖ Deployment verification
      run: |
        echo "üß™ Testing deployed functions..."
        sleep 30  # Wait for deployment to complete
        
        # Test TokenizerFunction
        RESPONSE=$(curl -s -w "%{http_code}" "https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/TokenizerFunction?text=hello" -o /tmp/response.json)
        if [ "$RESPONSE" = "200" ]; then
          echo "‚úÖ TokenizerFunction: OK"
          cat /tmp/response.json
        else
          echo "‚ö†Ô∏è TokenizerFunction: HTTP $RESPONSE"
        fi
        
        # Test health endpoints
        curl -f "https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/ModelProxy" || echo "‚ö†Ô∏è ModelProxy health check failed"
        curl -f "https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/AgentOrchestrator" || echo "‚ö†Ô∏è AgentOrchestrator health check failed"

    - name: üìä Deployment summary
      run: |
        echo "üéâ Azure Functions Backend Deployment Complete!"
        echo "üîó Function App URL: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net"
        echo "üìÖ Deployed at: $(date)"
        echo ""
        echo "Available endpoints:"
        echo "  ‚Ä¢ AgentOrchestrator: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/AgentOrchestrator"
        echo "  ‚Ä¢ TokenizerFunction: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/TokenizerFunction"
        echo "  ‚Ä¢ AnalyzeGrant: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/AnalyzeGrant"
        echo "  ‚Ä¢ ProcessDocument: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/ProcessDocument"
        echo "  ‚Ä¢ FillGrantForm: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/FillGrantForm"
        echo "  ‚Ä¢ ModelProxy: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/ModelProxy"