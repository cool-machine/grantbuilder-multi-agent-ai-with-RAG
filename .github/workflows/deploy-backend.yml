name: ‚ö° Deploy Azure Functions Backend

on:
  push:
    branches: [ main ]
    paths: [ 'backend/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  AZURE_FUNCTIONAPP_NAME: ocp10-grant-functions
  AZURE_FUNCTIONAPP_PACKAGE_PATH: ./backend
  PYTHON_VERSION: '3.10'

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üêç Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üß™ Run tests
      run: |
        if [ -f "test_requirements.txt" ]; then
          pip install -r test_requirements.txt
          python -m pytest tests/ -v || echo "Tests failed - continuing deployment"
        else
          echo "No test requirements found - skipping tests"
        fi

    - name: üîç Lint code
      run: |
        pip install flake8 black
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting issues found"
        black --check . || echo "Code formatting issues found"

    - name: üìÅ Prepare deployment package
      run: |
        echo "üì¶ Preparing Azure Functions deployment package..."
        ls -la
        echo "Function directories:"
        find . -name "function.json" -exec dirname {} \;

    - name: üì§ Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: azure-functions-app
        path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    
    steps:
    - name: üì• Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: azure-functions-app
        path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

    - name: üîê Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: ‚ö° Deploy to Azure Functions
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        python-version: ${{ env.PYTHON_VERSION }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

    - name: üîß Configure App Settings
      run: |
        echo "üîß Updating Azure Functions app settings..."
        az functionapp config appsettings set \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ocp10 \
          --settings \
            "AZURE_ML_GEMMA_ENDPOINT=${{ secrets.GEMMA_API_ENDPOINT }}" \
            "AZURE_ML_GEMMA_KEY=${{ secrets.GEMMA_API_KEY }}" \
            "PYTHONPATH=/home/site/wwwroot" \
            "FUNCTIONS_WORKER_RUNTIME=python" \
            "FUNCTIONS_EXTENSION_VERSION=~4"

    - name: ‚úÖ Deployment verification
      run: |
        echo "üß™ Testing deployed functions..."
        sleep 30  # Wait for deployment to complete
        
        # Test TokenizerFunction
        RESPONSE=$(curl -s -w "%{http_code}" "https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/TokenizerFunction?text=hello" -o /tmp/response.json)
        if [ "$RESPONSE" = "200" ]; then
          echo "‚úÖ TokenizerFunction: OK"
          cat /tmp/response.json
        else
          echo "‚ö†Ô∏è TokenizerFunction: HTTP $RESPONSE"
        fi
        
        # Test health endpoints
        curl -f "https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/GemmaProxy" || echo "‚ö†Ô∏è GemmaProxy health check failed"

    - name: üìä Deployment summary
      run: |
        echo "üéâ Azure Functions Backend Deployment Complete!"
        echo "üîó Function App URL: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net"
        echo "üìÖ Deployed at: $(date)"
        echo ""
        echo "Available endpoints:"
        echo "  ‚Ä¢ TokenizerFunction: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/TokenizerFunction"
        echo "  ‚Ä¢ AnalyzeGrant: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/AnalyzeGrant"
        echo "  ‚Ä¢ ProcessDocument: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/ProcessDocument"
        echo "  ‚Ä¢ FillGrantForm: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/FillGrantForm"
        echo "  ‚Ä¢ GemmaProxy: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/GemmaProxy"