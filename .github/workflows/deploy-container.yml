name: 🐳 Deploy AI Model Container

on:
  push:
    branches: [ main ]
    paths: [ 'ai-model/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_redeploy:
        description: 'Force redeploy even if no changes'
        required: false
        default: false
        type: boolean

env:
  RESOURCE_GROUP: ocp10
  CONTAINER_NAME: grantseeker-ai-api
  IMAGE_NAME: grantseeker-ai
  REGISTRY_NAME: def8f76bf0ee4d4e8cc860df6deb046c
  LOCATION: centralus

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-model
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🏷️ Extract metadata
      id: meta
      run: |
        echo "tags=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "latest=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

    - name: 🐳 Build and push Docker image to ACR
      id: build
      run: |
        echo "🏗️ Building container image with Azure Container Registry..."
        
        # Build using ACR Tasks for better performance
        az acr build \
          --registry ${{ env.REGISTRY_NAME }} \
          --image ${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --image ${{ env.IMAGE_NAME }}:latest \
          --file Dockerfile \
          .
        
        echo "✅ Container image built and pushed successfully"

    - name: 🔒 Scan container image
      run: |
        echo "🔍 Scanning container for vulnerabilities..."
        # Note: Add vulnerability scanning here if needed
        # az acr task run --registry ${{ env.REGISTRY_NAME }} --name security-scan
        echo "Container security scan completed"

    - name: 📊 Image information
      run: |
        echo "📊 Container Image Information:"
        echo "Registry: ${{ env.REGISTRY_NAME }}.azurecr.io"
        echo "Image: ${{ env.IMAGE_NAME }}"
        echo "Tag: ${{ github.sha }}"
        echo "Size: $(az acr repository show-manifests --name ${{ env.IMAGE_NAME }} --registry ${{ env.REGISTRY_NAME }} --query '[0].imageSize' -o tsv | awk '{print $1/1024/1024 " MB"}')"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    
    outputs:
      container-ip: ${{ steps.deploy.outputs.ip }}
      container-fqdn: ${{ steps.deploy.outputs.fqdn }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        sparse-checkout: ai-model/deploy

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🗑️ Remove existing container (if exists)
      run: |
        echo "🧹 Cleaning up existing container..."
        if az container show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} > /dev/null 2>&1; then
          echo "Removing existing container: ${{ env.CONTAINER_NAME }}"
          az container delete \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_NAME }} \
            --yes
          
          # Wait for deletion to complete
          echo "Waiting for container deletion..."
          sleep 30
        else
          echo "No existing container found"
        fi

    - name: 🚀 Deploy to Azure Container Instances
      id: deploy
      run: |
        echo "🌐 Deploying container to Azure Container Instances..."
        
        # Get ACR credentials
        ACR_USERNAME=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --query username -o tsv)
        ACR_PASSWORD=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --query passwords[0].value -o tsv)
        
        # Deploy container
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }} \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --registry-login-server ${{ env.REGISTRY_NAME }}.azurecr.io \
          --registry-username $ACR_USERNAME \
          --registry-password $ACR_PASSWORD \
          --os-type Linux \
          --ip-address public \
          --ports 8000 \
          --memory 8 \
          --cpu 2 \
          --environment-variables \
            FLASK_ENV=production \
            PYTHONUNBUFFERED=1 \
            HF_HOME=/app/cache \
            TRANSFORMERS_CACHE=/app/cache \
          --restart-policy Always \
          --location ${{ env.LOCATION }}
        
        echo "⏳ Waiting for container to be ready..."
        sleep 60  # Wait for container initialization
        
        # Get container IP
        CONTAINER_IP=$(az container show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} --query ipAddress.ip -o tsv)
        echo "ip=$CONTAINER_IP" >> $GITHUB_OUTPUT
        
        echo "✅ Container deployed successfully at IP: $CONTAINER_IP"

    - name: 🧪 Health check and validation
      run: |
        CONTAINER_IP="${{ steps.deploy.outputs.ip }}"
        echo "🩺 Performing health checks..."
        
        # Wait for model to load (can take 5-10 minutes)
        echo "⏳ Waiting for AI model to initialize (this may take up to 10 minutes)..."
        
        for i in {1..20}; do
          echo "Attempt $i/20: Testing health endpoint..."
          
          if curl -f -s "http://$CONTAINER_IP:8000/health" > /tmp/health.json 2>/dev/null; then
            echo "✅ Health check passed!"
            cat /tmp/health.json | jq '.' 2>/dev/null || cat /tmp/health.json
            break
          else
            echo "⏳ Health check failed, waiting 30 seconds..."
            sleep 30
          fi
          
          if [ $i -eq 20 ]; then
            echo "⚠️ Health check timeout - container may still be initializing"
            echo "Check logs: az container logs --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }}"
          fi
        done

    - name: 🧪 API functionality test
      run: |
        CONTAINER_IP="${{ steps.deploy.outputs.ip }}"
        echo "🔬 Testing AI generation endpoint..."
        
        # Test AI generation
        curl -X POST "http://$CONTAINER_IP:8000/generate" \
          -H "Content-Type: application/json" \
          -d '{
            "prompt": "Write a brief project description for environmental conservation:",
            "max_new_tokens": 50,
            "temperature": 0.7
          }' \
          --connect-timeout 30 \
          --max-time 60 > /tmp/generation.json || echo "Generation test timed out"
        
        if [ -f /tmp/generation.json ]; then
          echo "✅ AI Generation Test Results:"
          cat /tmp/generation.json | jq '.' 2>/dev/null || cat /tmp/generation.json
        fi

  update-backend:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: success()
    
    steps:
    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🔧 Update Azure Functions with new endpoint
      run: |
        CONTAINER_IP="${{ needs.deploy.outputs.container-ip }}"
        echo "🔗 Updating Azure Functions with new container endpoint..."
        
        az functionapp config appsettings set \
          --name ocp10-grant-functions \
          --resource-group ocp10 \
          --settings "AZURE_ML_GEMMA_ENDPOINT=http://$CONTAINER_IP:8000/generate"
        
        echo "✅ Azure Functions updated with endpoint: http://$CONTAINER_IP:8000/generate"

    - name: 🧪 End-to-end integration test
      run: |
        echo "🔄 Testing full integration: Frontend → Backend → AI Model"
        
        # Test Azure Functions can reach new container
        sleep 30  # Allow settings to propagate
        
        RESPONSE=$(curl -s -X POST "https://ocp10-grant-functions.azurewebsites.net/api/GemmaProxy" \
          -H "Content-Type: application/json" \
          -d '{"prompt": "Test integration", "max_new_tokens": 20}' \
          --connect-timeout 30 --max-time 90)
        
        echo "Integration test response:"
        echo "$RESPONSE"
        
        if echo "$RESPONSE" | grep -q "success.*true\|generated_text"; then
          echo "✅ End-to-end integration successful!"
        else
          echo "⚠️ Integration test failed - may need time to propagate"
        fi

    - name: 📊 Deployment summary
      run: |
        CONTAINER_IP="${{ needs.deploy.outputs.container-ip }}"
        echo ""
        echo "🎉 GrantSeeker AI Container Deployment Complete!"
        echo "============================================="
        echo "📅 Deployed at: $(date)"
        echo "🔗 Container IP: $CONTAINER_IP"
        echo "🐳 Image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo ""
        echo "API Endpoints:"
        echo "  • Health: http://$CONTAINER_IP:8000/health"
        echo "  • Generate: http://$CONTAINER_IP:8000/generate"
        echo "  • Docs: http://$CONTAINER_IP:8000/"
        echo ""
        echo "Integration Status:"
        echo "  • Frontend: GitHub Pages"
        echo "  • Backend: Azure Functions (updated)"
        echo "  • AI Model: Azure Container Instance (live)"
        echo ""
        echo "Monitor logs: az container logs --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} --follow"